一、客户端
1、关于MVVM：重点是解决问题，而不是拘泥于某种模式。当controller处理的业务不重时，用MVC就挺好，而MVVM在这里并没有体现自己的优势，反倒是显得繁琐。因此这部分代码，就没用MVVM
2、关于权限配置，有时候总是输不对，参考这里吧：http://blog.csdn.net/tianxiawoyougood/article/details/56016630
3、关于cell高度的处理，tableview有一种自适应内容高度的方案A，需要结合autolayout。当内容中只有label时，这个方法表现还行。麻烦主要出在imageView上：
（1）获取网络图片高度：我在获取网络图片时，传入了一个回调，可以得到宽度和高度
（2）imageview设置高度，没法配合方案A实现，关于这一点，我不想花太多时间去研究，所以放弃了方案A
（3）方案B：在cell的数据模型中配置高度属性，这是之前最常用的方案。不过这里没办法完美的适配网络图片的原始宽高，为了好看，只能截图。这里就暂且这样处理了
4、关于图片加载方案：
（1）关于Kingfisher，其默认的加载图片方式，就是‘缓存加载’。这种方式对于省流量和加载速度有一定帮助，但这两方面的限制已经显得越来越不那么重要了，而且这种方案对我的设计不匹配，所以我做了一个‘不缓存加载’方法，用URLSession实现。
（2）我的方案其实不那么主流，主要是在编辑文章时，我会替换之前的图片，而非直接新添图片，这样可以节省客户端和服务端的存储空间，缺点就是耗流量且加载慢，这样设计权当玩玩而已。
5、客户端使用moya来进行网络通信，真心方便。但错误处理还没用，这里不想花时间。
6、文章读写的方案，有抄袭也有创新，感觉还行


二、服务端
1、koa功能强大啊
2、关于controllers这套结构，借鉴了别人的代码，感觉很不错
3、fs模块用得较多，主要是因为这段时间做了不少文件操作
4、数据库设计的特别简单，主要是功能设计上没有那么多复杂的需求。关于数据库操作，还要好好向容容学习
5、关于rest API设计，错误码设计，这部分都是借鉴，感觉挺好

三、接下来的事：
1、swift：虽然代码撸出来了，语法机制也属性不少，但明显还不够熟悉。打算回头看看语法，巩固一下，避免花时间去查一些很简单的东西
2、koa、fs、数据库等，还需要再回头看看
3、接下来当然还是通过撸代码学习，想撸的东西还很多啊。


