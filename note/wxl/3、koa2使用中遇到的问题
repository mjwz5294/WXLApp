一、promose、await、async语法
1、方法前面加上async，该方法就不会阻塞
2、await会阻塞，后面必须是一个promise对象
3、只能用在async环境中
4、promise对象中的方法，会通过resolve或reject返回，并结束await的阻塞


二、koa2使用过程中的参数传递


三、postman的使用
1、postman中 form-data、x-www-form-urlencoded、raw、binary的区别：http://blog.csdn.net/wangjun5159/article/details/47781443
2、post文件要用form-data，当然也可以用raw然后自己编辑JSON
3、post字符串要用x-www-form-urlencoded
4、cookie与session概念：https://www.cnblogs.com/andy-zhou/p/5360107.html
5、关于REST规范：
(1)Rest概念：
https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014735914606943e2866257aa644b4bdfe01d26d29960b000
(2)Rest编辑：
https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014735944539193ab2edd2740f44a79efb438a05e83727000

四、REST编辑：
1、URL组织：/static/开头的URL是静态资源文件，/api/开头的URL就是REST API，其他URL是普通的MVC请求。
2、添加一个rest.js中间件，使rest api都统一返回json格式数据，并提供了一个简便的返回数据的函数
3、错误处理：
（1）错误分类：一种是类似403，404，500等HTTP请求错误；一种是业务逻辑的错误
（2）第一类的错误实际上客户端可以识别，并且我们也无法操控HTTP服务器的错误码，所以服务端需要管的就是错误码不要设计重合了
（3）重点就是第二类错误，我们会返回一个json，主要包括错误码code，消息内容message，具体数据又在message中分层设计。
4、错误码设计
（1）错误码采用字符串形式，意思比较清晰。
（2）字符串错误码进行分类，比如权限错误可设计为‘auth:bad_password’和‘auth:user_not_found’等
（3）用throw语句抛出错误，而不用前面设计的rest中间件提供的rest方法，主要是后者有使用范围限制，而前者随处可用
